//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

extension SwaggerClientAPI {
    
    public class DefaultAPI: APIBase {
    
        /**
         
         - GET /Datastreams
         - Gets Datastreams, i.e., collections of observations that are related in some way. The one constraint is that the observations in a datastream must measure the same observed property (i.e., one phenomenon).
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[Datastream]> 
         */
        public class func datastreamsGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[Datastream]> {
            let path = "/Datastreams"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[Datastream]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /FeatureOfInterests
         - Gets Features or feature collections that represent the identifiable object(s) on which the sensor systems are making observations. In the case of an in-situ sensor or observations being attributes of the thing, the feature of interest could be the thing itself. For remote sensors, this may be the geographical area or volume that is being sensed.
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[FeatureOfInterest]> 
         */
        public class func featureOfInterestsGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[FeatureOfInterest]> {
            let path = "/FeatureOfInterests"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[FeatureOfInterest]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /Locations
         - Gets Locations, i.e., registered absolute geographical position at a specific time point.
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[Location]> 
         */
        public class func locationsGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[Location]> {
            let path = "/Locations"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[Location]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /Observations
         - Gets Observation objects, i.e., objects representing the act of observing a property or phenomenon on a feature of interest, with the goal of producing an estimate of the value of the property. A specialized event whose result is a data value. [OGC 07-022r1]
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[Observation]> 
         */
        public class func observationsGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[Observation]> {
            let path = "/Observations"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[Observation]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /ObservedProperties
         - Gets ObservedProprties, i.e., the phenomenon of a given observation.
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[ObservedProperty]> 
         */
        public class func observedPropertiesGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[ObservedProperty]> {
            let path = "/ObservedProperties"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[ObservedProperty]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /Sensors
         - Gets available Sensors, i.e., instruments that can observe a property or phenomenon with the goal of producing an estimate of the value of the property. In some cases,  sensor in this data model can also be seen as the procedure (method, algorithm, or instrument) defined in OGC 07-022r1.
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[FeatureOfInterest]> 
         */
        public class func sensorsGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[FeatureOfInterest]> {
            let path = "/Sensors"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[FeatureOfInterest]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
        /**
         
         - GET /Things
         - Gets `Things` objects. We use the ITU-T definition, i.e., with regard to the Internet of Things, a thing is an object of         the physical world (physical things) or the information world (virtual things) which is capable of being identified and         integrated into communication networks. (ITU-T Y.2060)<br/>Several query params are supported to filter retrieved data according to different constraints.
         - examples: [{contentType=application/json, example=[ "" ]}]
         
         - parameter $orderby: (query) The &lt;strong&gt;$orderby&lt;/strong&gt; query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the &lt;strong&gt;$orderby&lt;/strong&gt; query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.&lt;br/&gt;&lt;br/&gt;The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. &lt;br/&gt;&lt;br/&gt;Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue&lt;/address&gt; returns all Observations ordered by the ResultValue property in ascending order.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time&lt;/address&gt; returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $top: (query) The &lt;strong&gt;$top&lt;/strong&gt; query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.&lt;br/&gt;Usually, the &lt;strong&gt;$top&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the &lt;strong&gt;$top&lt;/strong&gt; query option should be discarded and the pagination limitation should be imposed.
         - parameter $skip: (query) The &lt;strong&gt;$skip&lt;/strong&gt; query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.&lt;br/&gt;Usually, the &lt;strong&gt;$skip&lt;/strong&gt; query option is used with the &lt;strong&gt;$orderby&lt;/strong&gt; query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.&lt;br/&gt;Where &lt;strong&gt;$top&lt;/strong&gt; and &lt;strong&gt;$skip&lt;/strong&gt; are used together, the &lt;strong&gt;$skip&lt;/strong&gt; must be applied before the &lt;strong&gt;$top&lt;/strong&gt;, regardless of the order in which they appear in the request.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt;&lt;address&gt; http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5&lt;/address&gt; returns Product entities starting with the sixth Product entity in the Products collection.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&amp;$top=2&amp;$orderby=Time&lt;/address&gt; returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.&lt;/li&gt;&lt;/ul&gt;
         - parameter $filter: (query) A URI with a &lt;strong&gt;$filter&lt;/strong&gt; query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the &lt;strong&gt;$filter&lt;/strong&gt;. The value of the &lt;strong&gt;$filter&lt;/strong&gt; option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime&#39;ISO 8601 time string&#39;.&lt;br/&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00&lt;/address&gt; returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20&#39;Celsius&#39;&lt;/address&gt; returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is &#39;Celsius&#39;.&lt;/li&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))&lt;/address&gt; returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; &lt;address&gt;http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20&#39;FOI_1&#39;%20and%20Datastreams/Observations/Time%20ge%20datetime&#39;2010-06-01T00:00:00Z&#39;%20and%20Datastreams/Observations/Time%20le%20datetime&#39;2010-07-01T00:00:00Z&#39;&lt;/address&gt; returns Things that have any observations on a feature of interest with a unique identifier equals to &#39;FOI_1&#39; in June 2010.&lt;/li&gt;&lt;/ul&gt;For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations

         - returns: RequestBuilder<[Thing]> 
         */
        public class func thingsGet($orderby $orderby: String?, $top: Int?, $skip: Int?, $filter: Int?) -> RequestBuilder<[Thing]> {
            let path = "/Things"
            let URLString = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "$orderby": $orderby,
                "$top": $top,
                "$skip": $skip,
                "$filter": $filter
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<[Thing]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: URLString, parameters: parameters, isBody: false)
        }
    
    }
}
