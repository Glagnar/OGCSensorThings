//
// Observation.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


/** An act of observing a property or phenomenon on a feature of interest, with the goal of producing an estimate of the value of the property. A specialized event whose result is a data value. [OGC 07-022r1] */
public class Observation: JSONEncodable {
    /** ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type. */
    public var iotId: AnyObject?
    /** Self-Link is the absolute URL of an entity which is unique among all other entities. */
    public var iotSelfLink: String?
    /** Navigation-Link is the relative URL that retrives content of related entities. */
    public var iotNavigationLink: String?
    /** The time point/period of when the observation happens. */
    public var time: NSDate?
    /** The data type of the ResultValue. Service should by default set the ResultType as Measure unless users specify a different ResultType when creating an observation. */
    public var resultType: String?
    /** The estimated value of an observedProperty from the observation. */
    public var resultValue: String?
    public var datastream: Datastream?
    public var featureOfInterest: FeatureOfInterest?
    public var sensor: Sensor?

    public init() {}

    // MARK: JSONEncodable
    func encodeToJSON() -> AnyObject {
        var nillableDictionary = [String:AnyObject?]()
        nillableDictionary["@iot.id"] = self.iotId
        nillableDictionary["@iot.selfLink"] = self.iotSelfLink
        nillableDictionary["@iot.navigationLink"] = self.iotNavigationLink
        nillableDictionary["Time"] = self.time?.encodeToJSON()
        nillableDictionary["ResultType"] = self.resultType
        nillableDictionary["ResultValue"] = self.resultValue
        nillableDictionary["Datastream"] = self.datastream?.encodeToJSON()
        nillableDictionary["FeatureOfInterest"] = self.featureOfInterest?.encodeToJSON()
        nillableDictionary["Sensor"] = self.sensor?.encodeToJSON()
        let dictionary: [String:AnyObject] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
