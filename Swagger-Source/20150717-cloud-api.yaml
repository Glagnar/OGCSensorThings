# YAML definition of the ALMANAC Cloud API (including the OGC SensorThings API) 
swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.1"
  title: ALMANAC Cloud API

# Describe your paths here
paths:
  # This is a path endpoint. Change it.
  /Things:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: "Gets `Things` objects. We use the ITU-T definition, i.e., with regard to the Internet of Things, a thing is an object of         the physical world (physical things) or the information world (virtual things) which is capable of being identified and         integrated into communication networks. (ITU-T Y.2060)<br/>Several query params are supported to filter retrieved data according to different constraints."
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: "Successful response"
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: array
            items:
              "$ref": "#/definitions/Thing"

  /Observations:
    get:
      description: Gets Observation objects, i.e., objects representing the act of observing a property or phenomenon on a feature of interest, with the goal of producing an estimate of the value of the property. A specialized event whose result is a data value. [OGC 07-022r1]
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
          
      responses:
        200:
          description: "successful response"
          schema:
            type: array
            items:
              "$ref": "#/definitions/Observation"
  /Datastreams:
    get:
      description: Gets Datastreams, i.e., collections of observations that are related in some way. The one constraint is that the observations in a datastream must measure the same observed property (i.e., one phenomenon). 
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
      responses:
        200:
          description: "successful response"
          schema:
            type: array
            items:
              "$ref": "#/definitions/Datastream"
  /ObservedProperties:
    get:
      description: Gets ObservedProprties, i.e., the phenomenon of a given observation.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
      responses:
        200:
          description: "successful response"
          schema:
            type: array
            items:
              "$ref": "#/definitions/ObservedProperty"
  /Locations:
    get:
      description: Gets Locations, i.e., registered absolute geographical position at a specific time point.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
      responses:
        200:
          description: "successful response"
          schema:
            type: array
            items:
              "$ref": "#/definitions/Location"
  /Sensors:
    get:
      description: Gets available Sensors, i.e., instruments that can observe a property or phenomenon with the goal of producing an estimate of the value of the property. In some cases,  sensor in this data model can also be seen as the procedure (method, algorithm, or instrument) defined in OGC 07-022r1.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
      responses:
        200:
          description: "successful response"
          schema:
            type: array
            items:
              "$ref": "#/definitions/FeatureOfInterest"
  /FeatureOfInterests:
    get:
      description: Gets Features or feature collections that represent the identifiable object(s) on which the sensor systems are making observations. In the case of an in-situ sensor or observations being attributes of the thing, the feature of interest could be the thing itself. For remote sensors, this may be the geographical area or volume that is being sensed.
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: $orderby
          in: query
          description: "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>"
          required: false
          type: string
        -
          name: $top
          in: query
          description: "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed."
          required: false
          type: integer
        -
          name: $skip
          in: query
          description: "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>"
          required: false
          type: integer
        -
          name: $filter
          in: query
          description: "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations"
          required: false 
          type: integer
      responses:
        200:
          description: "successful response"
          schema:
            type: array
            items:
              "$ref": "#/definitions/FeatureOfInterest"
definitions:
  #--- OGC Sensor Things API definitions ---#      
  Entity:
    properties:
      ID:
        type: string
        description: ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type.
      Self-link:
        type: string
        description: Self-Link is the absolute URL of an entity which is unique among all other entities. 
      Association-Link:
        type: string
        description: Association-Link is the relative URL showing the related entities in other entity types. Only the Self-Links of related entities are returned when resolving Association-Links.
      Navigation-Link:
        type: string
        description: Navigation-Link is the relative URL that retrives content of related entities.
    required:
      - ID
  Thing:
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
          Description:
              type: string
              description: This is the description of the thing entity. The content is open to accommodate changes to SensorML and to support other description languages.
          Locations:
            description: A thing can locate at different geographical positions at different time points (multiple locations). Multiple things can locate at the same location at the same time. A thing may not have a location.
            type: array
            items:
                "$ref": "#/definitions/Location"
          Datastreams:
            description: A thing can have zero-to-many datastreams. A datastream entity can only link to a thing as a collection of observations or properties.
            type: array
            items:
                "$ref": "#/definitions/Datastream"
  Location:
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
          Time:
            type: string
            format: date
            description: The time point/period of the location.
          Geometry:
            type: string
            description: The absolute geographical position of the location. This is generally the GeoJSON geometry object.
          Things:
            type: array
            items:
              "$ref": "#/definitions/Thing"
  Datastream:
    description: A datastream groups a collection of observations that are related in some way. The one constraint is that the observations in a datastream must measure the same observed property (i.e., one phenomenon). 
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
            Description:
              type: string
              description: This is the description of the datastream entity. The content is open to support other description languages.
            Thing:
              "$ref": "#/definitions/Thing"
              description: A thing can have zero-to-many datastreams. A datastream entity can only link to a thing as a collection of observations or properties.
            ObservedProperty:
              "$ref": "#/definitions/ObservedProperty"
              description: The observations of a datastream observe the same observedProperty. The observations of different datastreams could observe the same observedProperty.
            Observations:
              description: A datastream can have zero-to-many observations. One observation must occur in one and only one datastream.
              type: array
              items:
                "$ref": "#/definitions/Observation"
  ObservedProperty:
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
          URI: 
            type: string
            description: The URI of the observedProperty/phenomenon.
          UnitOfMeasurement:
            type: string
            description: The unit of measurement for the observations measuring this observedProperty.
          Datastreams:
            type: array
            items:
              "$ref": "#/definitions/Datastream"
        
  Observation:
    required:
      - phenomenonTime
      - ResultType
      - ResultValue
      
    description: An act of observing a property or phenomenon on a feature of interest, with the goal of producing an estimate of the value of the property. A specialized event whose result is a data value. [OGC 07-022r1]
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
          phenomenonTime:
            type: string
            format: date
            description: The time point/period of when the observation happens.
          ResultType:
            type: string
            description: The data type of the ResultValue. Service should by default set the ResultType as Measure unless users specify a different ResultType when creating an observation.
          ResultValue: 
            type: string
            description: The estimated value of an observedProperty from the observation.
          Datastream: 
            "$ref": "#/definitions/Datastream"
          FeatureOfInterest:
            "$ref": "#/definitions/FeatureOfInterest"
          Sensor:
            "$ref": "#/definitions/Sensor"
  Sensor:
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
          Metadata:
            type: string
            description: The detailed description of the sensor or system. The content is open to accommodate changes to SensorML or to support other description languages.
          Observations:
            type: array
            items:
                "$ref" : "#/definitions/Observation"
  FeatureOfInterest:
    allOf:
      - "$ref": "#/definitions/Entity"
      - properties:
          Description:
            type: string
            description:  	This is the description of the feature of interest entity. The content is open to accommodate changes to SensorML and to support other description languages. In the case of the thing itself being the feature of interest, this description property is inherited from the thing entity.
          Geometry:
            type: string
            description: The absolute geographical position of the feature of interest. This is generally the GeoJSON geometry object. In the case of the thing itself being the feature of interest, this geometry property is inherited from the thing entity by interpolating the geometries in the location entities.
          Observations:
            type: array
            items:
              "$ref": "#/definitions/Observation"
        
        