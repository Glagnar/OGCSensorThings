{
    "swagger": "2.0",
    "info": {
        "version": "2.1.0",
        "title": "ALMANAC Cloud API"
    },
    "paths": {
        "/Things": {
            "get": {
                "description": "Gets `Things` objects. We use the ITU-T definition, i.e., with regard to the Internet of Things, a thing is an object of         the physical world (physical things) or the information world (virtual things) which is capable of being identified and         integrated into communication networks. (ITU-T Y.2060)<br/>Several query params are supported to filter retrieved data according to different constraints.",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/ThingsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new Thing description",
                "parameters": [
                    {
                        "name": "thing",
                        "description": "The Thing to add",
                        "schema": {
                            "$ref": "#/definitions/Thing"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/Observations": {
            "get": {
                "description": "Gets Observation objects, i.e., objects representing the act of observing a property or phenomenon on a feature of interest, with the goal of producing an estimate of the value of the property. A specialized event whose result is a data value. [OGC 07-022r1]",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/ObservationsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new obervation pertaining to a given data stream",
                "parameters": [
                    {
                        "name": "observation",
                        "description": "The Observation to add",
                        "schema": {
                            "$ref": "#/definitions/Observation"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/Datastreams": {
            "get": {
                "description": "Gets Datastreams, i.e., collections of observations that are related in some way. The one constraint is that the observations in a datastream must measure the same observed property (i.e., one phenomenon).",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/DatastreamsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new DataStream definition",
                "parameters": [
                    {
                        "name": "datastream",
                        "description": "The Datastream to add",
                        "schema": {
                            "$ref": "#/definitions/Datastream"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/ObservedProperties": {
            "get": {
                "description": "Gets ObservedProprties, i.e., the phenomenon of a given observation.",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/ObservedPropertiesResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new ObservedPropertyy",
                "parameters": [
                    {
                        "name": "observedProperty",
                        "description": "The ObservedProperty to add",
                        "schema": {
                            "$ref": "#/definitions/ObservedProperty"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/Locations": {
            "get": {
                "description": "Gets Locations, i.e., registered absolute geographical position at a specific time point.",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry%20st_within(POLYGON%20((30%2010,%2010%2020,%2020%2040,%2040%2040,%2030%2010)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/LocationsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new Location definition",
                "parameters": [
                    {
                        "name": "location",
                        "description": "The Location to add",
                        "schema": {
                            "$ref": "#/definitions/Location"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/Sensors": {
            "get": {
                "description": "Gets available Sensors, i.e., instruments that can observe a property or phenomenon with the goal of producing an estimate of the value of the property. In some cases,  sensor in this data model can also be seen as the procedure (method, algorithm, or instrument) defined in OGC 07-022r1.",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/SensorsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new sensor description",
                "parameters": [
                    {
                        "name": "sensor",
                        "description": "The Observation to add",
                        "schema": {
                            "$ref": "#/definitions/Sensor"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/FeatureOfInterests": {
            "get": {
                "description": "Gets Features or feature collections that represent the identifiable object(s) on which the sensor systems are making observations. In the case of an in-situ sensor or observations being attributes of the thing, the feature of interest could be the thing itself. For remote sensors, this may be the geographical area or volume that is being sensed.",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/FeatureOfInterestsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new Feature of Interest description",
                "parameters": [
                    {
                        "name": "featureOfInterest",
                        "description": "The FeatureOfInterest to add",
                        "schema": {
                            "$ref": "#/definitions/FeatureOfInterest"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        },
        "/HistoricalLocations": {
            "get": {
                "description": "Gets Historic Locations of a Thing. A Thing’s HistoricalLocation entity set provides the current (i.e., last known) and previous locations of the Thing with their time.",
                "parameters": [
                    {
                        "name": "$orderby",
                        "in": "query",
                        "description": "The <strong>$orderby</strong> query option is used to specify which properties are used to order the collection of entities identified by the resource path. The value of the <strong>$orderby</strong> query option contains a comma separated list of expressions whose primitive result values are used to sort the results. A special case of such an expression is a property path terminating on a primitive property.<br/><br/>The expression may include the suffix asc for ascending or desc for descending, separated from the property name by one or more spaces. If asc or desc is not specified, the service must order by the specified property in ascending order. <br/><br/>Null values come before non-null values when sorting in ascending order and after non-null values when sorting in descending order.<br/><ul><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=ResultValue</address> returns all Observations ordered by the ResultValue property in ascending order.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$orderby=Datastreams/ID%20desc,Time</address> returns all Observations ordered by the ID property of the linked Datastream entry in descending order, then by the Time property of Observations in ascending order.</li></ul>",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "$top",
                        "in": "query",
                        "description": "The <strong>$top</strong> query option specifies a non-negative integer that limits the number of entities returned within a collection. The service must return the number of available entities up to, but not exceeding, the specified value.<br/>Usually, the <strong>$top</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>In addition, if the $top value exceeds the service-driven pagination limitation (i.e., the largest number of entities the service can return in a single response), the <strong>$top</strong> query option should be discarded and the pagination limitation should be imposed.",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$skip",
                        "in": "query",
                        "description": "The <strong>$skip</strong> query option specifies that the result must not include the first n entities, where n is a non-negative integer value specified by the $skip query option.<br/>Usually, the <strong>$skip</strong> query option is used with the <strong>$orderby</strong> query option. However, while no ordering semantics are mandated, to ensure repeatable results, a data service must always use the same semantics to obtain a full ordering across requests.<br/>Where <strong>$top</strong> and <strong>$skip</strong> are used together, the <strong>$skip</strong> must be applied before the <strong>$top</strong>, regardless of the order in which they appear in the request.<br/><ul><li><strong>Example 1:</strong><address> http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$skip=5</address> returns Product entities starting with the sixth Product entity in the Products collection.</li><li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$skip=2&$top=2&$orderby=Time</address> returns the third and fourth Observation entities from the collection of all Observation entities when the collection is sorted by the Time property in ascending order.</li></ul>",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "$filter",
                        "in": "query",
                        "description": "A URI with a <strong>$filter</strong> query option identifies a subset of the entries from the collection of entries identified by the resource path of the URI. The subset is determined by selecting only the entries that satisfy the predicate expression specified by the <strong>$filter</strong>. The value of the <strong>$filter</strong> option is a Boolean expression. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or datetime values represented as datetime'ISO 8601 time string'.<br/><ul><li><strong>Example:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=ResultValue%20lt%2010.00</address> returns all Observations whose ResultValue is less than 10.00. In addition, users may use the properties of linked entities in the $filter predicate. The following are examples of the possible uses of the $filter in the data model of the SensorThings service.</li><li><strong>Example 1:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Observations?$filter=Datastream/ObservedProperty/UnitOfMeasurement%20eq%20'Celsius'</address> returns all Observations whose UnitOfMeasurement (a property of ObservedProperty) is 'Celsius'.</li><strong>Example 2:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Locations/Geometry st_within(POLYGON ((30 10, 10 20, 20 40, 40 40, 30 10)))</address> returns Things whose current or past locations were in the polygon defined in the Well-Known Text (WKT).</li><li><strong>Example 3:</strong> <address>http://demo.student.geocens.ca:8080/SensorThings_V1.0/Things?$filter=Datastreams/Observations/FeatureOfInterest/ID%20eq20'FOI_1'%20and%20Datastreams/Observations/Time%20ge%20datetime'2010-06-01T00:00:00Z'%20and%20Datastreams/Observations/Time%20le%20datetime'2010-07-01T00:00:00Z'</address> returns Things that have any observations on a feature of interest with a unique identifier equals to 'FOI_1' in June 2010.</li></ul>For more information on available query functions, look at: http://ogc-iot.github.io/ogc-iot-api/api.html#queryFunctions. Instead, for built-in filter operations look at http://ogc-iot.github.io/ogc-iot-api/api.html#filterOperations",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "$ref": "#/definitions/HistoricalLocationsResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Posts a new HistoricLocation description",
                "parameters": [
                    {
                        "name": "historicLocation",
                        "description": "The HistoricalLocation to add",
                        "schema": {
                            "$ref": "#/definitions/HistoricalLocation"
                        },
                        "in": "body",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response"
                    }
                }
            }
        }
    },
    "definitions": {
        "Thing": {
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the thing entity. The content is open to accommodate changes to SensorML and to support other description languages."
                },
                "properties": {
                    "type": "object",
                    "description": "a set of additional properties specified for the object in the form \"name\":\"value\" pair"
                },
                "Locations": {
                    "description": "The Location entity locates the Thing. Multiple Things MAY be located at the same Location. A Thing MAY not have a Location. A Thing SHOULD have only one Location. However, in some complex use cases, a Thing MAY have more than one Location representations. In such case, the Thing MAY have more than one Locations. These Locations SHALL have different encodingTypes and the encodingTypes SHOULD be in different spaces (e.g., one encodingType in Geometrical space and one encodingType in Topological space). (many-to-many)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Location"
                    }
                },
                "HistoricalLocations": {
                    "description": "A Thing has zero-to-many HistoricalLocations. A HistoricalLocation has one-and-only-one Thing",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricalLocation"
                    }
                },
                "Datastreams": {
                    "description": "A thing MAY have zero-to-many datastreams.\"",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Datastream"
                    }
                },
                "HistoricalLocations@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "Datastreams@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "Locations@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            },
            "required": [
                "description"
            ]
        },
        "Location": {
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the thing entity. The content is open to accommodate changes to SensorML and to support other description languages."
                },
                "encodingType": {
                    "type": "string",
                    "description": "The encoding type of the location property. Its value is one of the ValueCode enumeration (see Table 8-6; currently only  application/vnd.geo+json  is supported)."
                },
                "location": {
                    "type": "object",
                    "description": "The location type is defined by encodingType. (only GeoJSON is supported)"
                },
                "Things": {
                    "description": "Multiple Things MAY locate at the same Location . A Thing MAY not have a Location.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Thing"
                    }
                },
                "HistoricalLocations": {
                    "description": "A Location can have zero-to-many HistoricalLocations . One HistoricalLocation SHALL have one or many Locations.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricalLocation"
                    }
                },
                "Things@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "HistoricalLocations@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "HistoricalLocation": {
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "time": {
                    "type": "string",
                    "description": "The time when the Thing is known at the Location. Datatype TM_Instant (ISO-8601 Time String)"
                },
                "Locations": {
                    "type": "array",
                    "description": "A Location can have zero-to-many HistoricalLocations. One HistoricalLocation SHALL have one or many Locations.",
                    "items": {
                        "$ref": "#/definitions/Location"
                    }
                },
                "Thing": {
                    "$ref": "#/definitions/Thing",
                    "description": "A HistoricalLocation has one-and-only-one Thing. One Thing MAY have zero-to-many HistoricalLocations. "
                },
                "Locations@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "Thing@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "Datastream": {
            "description": "A datastream groups a collection of observations that are related in some way. The one constraint is that the observations in a datastream must measure the same observed property (i.e., one phenomenon).",
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "description": {
                    "type": "string",
                    "description": "This is the description of the datastream entity. The content is open to support other description languages."
                },
                "unitOfMeasure": {
                    "type": "object",
                    "description": " A JSON Object containing three key- value pairs. The name property presents the full name of the unitOfMeasurement; the symbol property shows the textual form of the unit symbol; and the definition contains the IRI defining the unitOfMeasurement. The values of these properties SHOULD follow the Unified Code for Unit of Measure (UCUM)."
                },
                "observationType": {
                    "type": "string",
                    "description": "The type of Observation (with  unique result type), which is used by  the service to encode observations. E.g.  http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement"
                },
                "observedArea": {
                    "type": "object",
                    "description": "The spatial bounding box of the spatial  extent of all FeaturesOfInterest  that belong to the Observations  associated with this Datastream. Typically a GeoJSON Polygon"
                },
                "phenomenonTime": {
                    "type": "string",
                    "description": "The temporal bounding box of the phenomenon times of all observations  belonging to this Datastream.  TM_Period(ISO 8601 Time Interval)"
                },
                "resultTime": {
                    "type": "string",
                    "description": "The temporal bounding box of the result times of all observations belonging to this Datastream. TM_Period (ISO 8601 Time Interval)"
                },
                "Thing": {
                    "$ref": "#/definitions/Thing",
                    "description": "A Thing has zero-to-many Datastreams. A Datastream entity SHALL only link to a Thing as a collection of Observations ."
                },
                "Sensor": {
                    "$ref": "#/definitions/Sensor",
                    "description": "The Observations in a Datastream are performed by one-and-only-one Sensor. One Sensor MAY produce zero-to-many Observations in different Datastreams."
                },
                "ObservedProperty": {
                    "$ref": "#/definitions/ObservedProperty",
                    "description": "The observations of a datastream SHALL observe the same observedProperty. The observations of different datastreams MAY observe the same observedProperty."
                },
                "Observations": {
                    "description": "A datastream has zero-to-many observations. One observation SHALL occur in one and only one Datastream.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Observation"
                    }
                },
                "Thing@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "Sensor@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "ObservedProperty@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "Observations@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "Sensor": {
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "description": {
                    "type": "string",
                    "description": "The description of the Sensor entity."
                },
                "encodingType": {
                    "type": "string",
                    "description": "The encoding type of the metadata property. Its value is one of the ValueCode enumeration (see Table 8-14 for the available ValueCode: application/pdf or  http://www.opengis.net/doc/IS/SensorML/2.0)."
                },
                "metadata": {
                    "type": "string",
                    "description": "The detailed description of the sensor or system. The content is open to accommodate changes to SensorML or to support other description languages."
                },
                "Datastreams": {
                    "type": "array",
                    "description": "The Observations of a Datastream are measured with the same Sensor. One Sensor MAY produce zero-to-many Observations in different Datastreams.",
                    "items": {
                        "$ref": "#/definitions/Datastream"
                    }
                },
                "Datastreams@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "ObservedProperty": {
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "name": {
                    "type": "string",
                    "description": " The name of the ObservedProperty."
                },
                "definition": {
                    "type": "string",
                    "description": "The IRI of the ObservedProperty. Dereferencing this IRI SHOULD result in a representation of the definition of the ObservedProperty."
                },
                "description": {
                    "type": "string",
                    "description": " A description about the  ObservedProperty."
                },
                "Datastreams": {
                    "type": "array",
                    "description": " The Observations of a Datastream observe the same ObservedProperty . The Observations of different Datastreams MAY observe the same ObservedProperty. ",
                    "items": {
                        "$ref": "#/definitions/Datastream"
                    }
                },
                "Datastreams@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "Observation": {
            "description": "An Observation is act of measuring or otherwise determining the value of a property [OGC and ISO 19156:2011] ",
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "phenomenonTime": {
                    "type": "string",
                    "description": "The time instant or period of when the Observation happens. Note: Many resource-constrained sensing devices do not have a clock. As a result, a client may omit phenonmenonTime when POST new Observations, even though phenonmenonTime is a mandatory property. When a SensorThings service receives a POST Observations without phenonmenonTime, the service SHALL assign the current server time to the value of the phenomenonTime."
                },
                "result": {
                    "type": "string",
                    "description": "The estimated value of an ObservedProperty from the Observation."
                },
                "resultTime": {
                    "type": "string",
                    "format": "date",
                    "description": "The time of the Observation's result was generated. Note: Many resource-constrained sensing devices do not have a clock. As a result, a client may omit resultTime when POST new Observations, even though resultTime is a mandatory property. When a SensorThings service receives a POST Observations without resultTime, the service SHALL assign a null value to the resultTime."
                },
                "resultQuality": {
                    "type": "string",
                    "description": "Describes the quality of the result."
                },
                "validTime": {
                    "type": "string",
                    "format": "date",
                    "description": "The time period during which the result may be used. TM_Period (ISO 8601 Time Interval string)"
                },
                "parameters": {
                    "type": "object",
                    "description": "Key-value pairs showing the environmental conditions during measurement."
                },
                "Datastream": {
                    "$ref": "#/definitions/Datastream"
                },
                "FeatureOfInterest": {
                    "$ref": "#/definitions/FeatureOfInterest"
                },
                "Datastream@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                },
                "FeatureOfInterest@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "FeatureOfInterest": {
            "properties": {
                "@iot.id": {
                    "type": "string",
                    "description": "ID is the system-generated identifier of an entity. ID is unique among the entities of the same entity type."
                },
                "@iot.selfLink": {
                    "type": "string",
                    "description": "Self-Link is the absolute URL of an entity which is unique among all other entities."
                },
                "description": {
                    "type": "string",
                    "description": "The description about the FeatureOfInterest."
                },
                "encodingType": {
                    "type": "string",
                    "description": "The encoding type of the feature property. Its value is one of the ValueCode enumeration (see Table 8-6 for the available ValueCode, GeoJSON). "
                },
                "feature": {
                    "type": "object",
                    "description": "The detailed description of the feature. The data type is defined by encodingType."
                },
                "Observations": {
                    "type": "array",
                    "description": "An Observation observes on one-and-only-one FeatureOfInterest. One FeatureOfInterest could be observed by zero-to-many Observations.",
                    "items": {
                        "$ref": "#/definitions/Observation"
                    }
                },
                "Observations@iot.navigationLink": {
                    "type": "string",
                    "description": "link to related entities"
                }
            }
        },
        "ThingsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Thing"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "ObservationsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Observation"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "ObservedPropertiesResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ObservedProperty"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "DatastreamsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Datastream"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "FeatureOfInterestsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FeatureOfInterest"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "HistoricalLocationsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/HistoricalLocation"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "LocationsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Location"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        },
        "SensorsResponse": {
            "properties": {
                "@iot.count": {
                    "type": "number"
                },
                "value": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Sensor"
                    }
                },
                "@iot.nextLink": {
                    "type": "string"
                }
            }
        }
    }
}